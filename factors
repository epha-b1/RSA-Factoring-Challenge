#!/usr/bin/python3
"""
Let's start by importing the necessary modules: `sys` for command-line
argument and `sqrt` from `math` for square root calculations
"""

from sys import argv
from math import sqrt
import time


# We define a function called `factor` that will perform the factorization
def factor():
    """
    We are now going to use the `with` statement to open the
    file specified in the command-line arguments (`argv[1]`)
    and loop over each line in the file
    """
    try:
        with open(argv[1]) as f:
            for line in f:
                """
                Now, let's convert the line to an integer and assign
                it to the variable `num`
                """
                num = int(line.strip())
                """
                We are now going to print the number followed by an
                equal sign (=) using the `print` function and the end
                parameter set to an empty string to prevent a newline
                """
                print(f"{num}=", end="", flush=True)
                """
                Next, we are going to check if the number is divisible by 2
                by using the modulo operator (%). If it is, print the factorization
                as `num/2` and continue to the next iteration of the loop.
                REASON: to avoid unnecessary calculations for numbers that are
                divisible by 2.
                """
                if num % 2 == 0:
                    print(f"{num//2}*2")
                    continue

                """
                We are now going to calculate square root of the number and assign
                it to the variable `sqn`. Convert it to an integer using `int` function
                REASON: to ensure we find the maximum possible factor of the number
                """
                sqn = int(sqrt(num))
                """
                Next, we check if the square root is divisible by 2. If it is, we increment
                it by 1 to ensure it is an odd number for subsequent calculations
                """
                if sqn % 2 == 0:
                    sqn += 1

                start_time = time.time()
                """
                We would now use a for loop to iterate from 3 to the square root
                (inclusive) in a steps of 2 in order to check for divisors of the
                number being evaluated.
                REASON: By incrementing the loop variable by 2 in each iteration,
                we only consider odd numbers as potential divisors, which helps
                optimize the process of finding prime numbers.
                """
                for i in range(3, sqn + 1, 2):
                    """
                    We are now going to check if the number is divisible by the current
                    value of i. If it is, we print the factorization as i * (num//i) and
                    break out of the loop.
                    REASON: to avoid further unnecessary iterations.
                    """
                    if num % i == 0:
                        print(f"{i}*{num//i}")
                        break

                    # Check if time limit exceeded
                    if time.time() - start_time >= 5:
                        print(f"{num}=1*{num}")
                        break
                else:
                    """
                    After the loop, if the number is not divisible by any value
                    of i, we print the factorization as num = num * 1
                    REASON: We print the factorization as num = num * 1 to indicate
                    that the number is a prime number.
                    """
                    print(f"{num}=1*{num}")

    except FileNotFoundError:
        print("Error: File not found")
    except ValueError:
        print("Error: Invalid input. Please provide a file containing natural numbers only.")

"""
Outside the loop, we call the `factor` function to start the
factorization process and execute the code within the function,
which performs the actual factorization of the given number.
"""
factor()
